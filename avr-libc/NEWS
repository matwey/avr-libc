*** Changes since avr-libc-1.2:

* Bugs fixed:

  [no-id]  Prefix all internal global symbols in libm with __fp_ so
           they do not collide with the application namespace.
  [#4101]  setjmp/longjmp destroy changes in global registers.
  [#11479] Add missing pin definitions for iotn16.h.
  [#11486] Put the port bit defintions back in for mega16.
  [#11505] Remove doxygen comment about the deprecated inp/outp items.
  [#11510] Abstract the change enable bit in wdt.h for mega32.
  [#11522] Rewrite wdt_disable() to match datasheet algorithm.

*** Changes in avr-libc-1.2:

* Bugs fixed:

  [no-id] Fix TICIE1 value in usb header files.
  [no-id] Fix bug introduced in fix for bug #7802 (missing parens).
  [no-id] Move ATtiny2313 and ATtiny13 from avr4 to avr2 (by now).
  [#2143] malloc() routines chunk smaller than requested
  [#5454] Inline functions results in undefined reference when optimize level 0
          is used.
  [#5799] error(?) in iom162.h
  [#2233] Documentation issues with inline asm
  [#6352] Sleep mode for ATmega162, ATmega161, and ATmega8515 
  [#7469] "Problem" by using the library function "boot_lock_bits_set"
  [#7556] printf and friends improperly handle non-null terminated strings when
          a %s argument has a precision.
  [#7802] vfscanf problem with unsigned long (patch #2554)
  [#7989] dtostrf() destroys string pointer registers?
  [#8119] _wdt_write macro in wdt.h doesn't work with ATmega169
  [#8391] Fuse mask in boot.h wrong?
          NOTE: boot_lock_bits_set() was broken. Please see the new
          documentation for examples of how the new version works.
  [#8452] some SFR and bit names in iom169.h are incorrect
          NOTE: Where possible, the old names are retained to avoid breaking
          existing code, but the OCR1A and OCR1B names where just plain wrong
          so they have been changed and the incorrect names (OCRA1 and OCRB1)
          are undefined.
  [#8649] sfr_defs.h: missed _SFR_BYTE() in bit_is_set/clear
  [#9345] Zero-Padding on vfprintf
  [#10150] Update release versions compatible with avr-libc and instructions.
  [#10489] Sleep mode for atmega48/88/168 family 
  [#10733] Fix bit identifer ADFR to ADATE in mega64.
  [#10828] Fix licenses on files to have same BSD license.
  [#11242] Add the EEARH register definition for the mega48.
  [#11275] fdevopen() should document its use of malloc()
  [#11315] Add USART* signal names to match datasheet for mega32 and mega16.
  [#11405] Add USART* signal names to match datasheet for mega128.
  [#11418] Add PRR register and bit definitions for mega169.
  [#11425] sleep.h missing semicolon

* Remove deprecated items:
  + obsolete headers from the base include directory (moved to the avr/
    subdirectory long ago)
  + deprecated macros and functions from
    . <avr/eeprom.h> (eeprom_rb, eeprom_rw, eeprom_wb),
    . <avr/io.h>  (cbi, sbi, inb, outb, inw, outw, inp, outp, BV),
    . <avr/pgmspace.h> (PRG_RDB).
  + . <avr/timer.h> removed completely.

* Moved header files:

  + <avr/ina90.h> moved to <compat/ina90.h>
  + <avr/twi.h> moved to <compat/twi.h>

* New devices supported:

  + ATmega165
  + ATmega325
  + ATmega3250
  + ATmega645
  + ATmega6450
  + ATmega48
  + ATmega88
  + ATmega168
  + ATtiny13
  + ATtiny2313
  + AT90CAN128

* Pin names for ports are now consistent for all devices.

* dtostrf() now uses movw where possible

* realloc() has been implemented.

* Extend pgmspace API.

The pgmspace API has had the following macros added to allow accessing of
unsigned 32-bit values:

  pgm_read_dword_near
  pgm_read_dword_far
  pgm_read_dword

* Change boot API.

The boot API internals have changed such that it is not compatible with the
1.0.x API.

These macros have been changed so that they no longer wait for SPM and EEPROM
operations to complete. It turns out that doing those checks all the time is
not needed and tends to bloat the code. Removing the checks allows you to
write more compact code (see the example in avr/boot.h).

  boot_page_fill
  boot_page_erase
  boot_page_write
  boot_rww_enable
  boot_lock_bits_set

If you want the old behaviour (1.0.x compatible), use these new macros:

  boot_page_fill_safe
  boot_page_erase_safe
  boot_page_write_safe
  boot_rww_enable_safe
  boot_lock_bits_set_safe

* Extend eeprom API.

New macro:
  eeprom_busy_wait

* Extend crc16 API.

New functions:
  _crc_xmodem_update
  _crc_ccitt_update

* Extend stdio API.

New functions:
  vfprintf_P
  vfscanf_P
  vsprintf
  vsprintf_P
  vsnprintf
  vsnprintf_P

* Extend malloc API.

Implement realloc().

* Extend delay API (<avr/delay.h>).

Implement inline functions for specifying delays in microseconds, or
milliseconds directly (based on the macro F_CPU specifying the CPU
clock frequency).

* Documentation changes:

  + Use newer Doxygen.
  + Many fixes and added documentation.
  + Unix-style man pages are generated now when doc generation has been
    enabled in ./configure

* Optimize slightly strtol and strtoul functions.

* Unified copyright.

All of the avr-libc files are now distributed under a single license.
All of the authors of the files agreed to this step.  The new license
is a 3-clause simplified ``BSD-style'' license which is believed to be
fully compatible with the GPL on one hand, yet imposes as minimal
restrictions as possible for any kind of commercial use in
applications based on avr-libc.

To build the documentation, doxygen-1.3.4 or newer is strongly recommended.

*** Changes in avr-libc-1.0:

* Move source to cvs repositiory at http://savannah.gnu.org/projects/avr-libc

Anonymous cvs access to the source is now available. There is also a mailing
list set up for discussion of development of avr-libc.

* License changes.

All the files in the project now are covered by a modified BSD license. This 
allows royalty free use of the library in commerical products. All of the 
public domain files in the project have been switched to the new license and
copyright given to the contributors of the files.

There were some files taken from GNU GPL'd projects which were removed from
avr-libc to simplify the licensing. The removed files only supplied alternate
implementations, so nothing was lost by their removal.

* Requires latest binutils and gcc

Marek did some fairly major work with binutils and gcc to make adding support
for new devices easier. His changes in those tools required changes to
avr-libc which make it incompatible with older versions of binutils and gcc.
Gcc versions >= 3.3 and binutils versions >= 2.13 are required.

* New malloc implementation.

Joerg Wunsch has supplied an improved malloc implementation which is less
prone to fragmentation.

* Documentation!

Joerg Wunsch and Ted Roth and have been working on using the doxygen program to
embed documentation comments into source code. Additionally, Harald Kipp's 
inline asm cookbook and Rich Neswold's Avr Tools document have been merged into
the user manual. The goal is to have a single place for all the documentation
a user would need to get started developing for AVR microcontrollers using
the GNU development tool chain.

The latest documentation is available online at
  http://www.freesoftware.fsf.org/avr-libc/

* I/O registers accessible directly in C expressions

You can now do this in your code:
  PORTA |= 0x02;

See the "Special Function Registers" documentation for details. This method is
preferred over the use of the deprecated inp(), inb(), inw(), outp(), outb()
and outw() functions.

* New devices supported

mega128
mega169
mega16
mega32
mega64 [untested]
mega8515 [untested]
mega8535 [untested]
tiny26
76c711
43usb320
43usb355
86rf401

* Improved trigonometrical functions:

Reiner Patommel provided complete rewrites for asin(), atan() and atan2()
that feature a better (for some argument ranges even much better)
accuracy than the previous versions.  Note that since acos() uses asin(),
it also benefits from this.

* Incompatibilities with previous version.

The arguments for outb()/outw() have been reversed.
  (value,port) -> (port,value)

* New pgmspace.h API.

Changed function names and added new functions to read the Program Space
FLASH. Added new functions to read 16-bit (word) values. The new API should 
also clear up problems with reading data from devices with > 64K of FLASH.

The API now includes:
pgm_read_byte       (maps to the *_near function below)
pgm_read_word       (maps to the *_near function below)
pgm_read_byte_near
pgm_read_word_near
pgm_read_byte_far
pgm_read_word_far


* New bootloader support API.

#include <avr/boot.h>

This provides bootloader support functions to those processors that have 
builtin bootloader support.

* inb / outb / inw / outw / cbi / sbi macros are deprecated.

* New string functions and optimized string functions.

strlcpy   (optimized)
strlcat   (optimized)
strsep    (new)
strtok_r  (new)
strlcat_P (new)
strlcpy_P (new)
strncat_P (new)

Contributed by Reiner Patommel with some work on strlcpy, strlcat by
Eric Weddington.

* New eeprom functions by Artur Lipowski <LAL@pro.onet.pl>

eeprom_write_word
eeprom_write_block


*** Changes up to avr-libc-20020203:

See the ChangeLog file up to 2002-02-03 for details.

