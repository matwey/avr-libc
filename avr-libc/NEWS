*** Changes since avr-libc-1.0:

* Use newer Doxygen.

To build the documentation, doxygen-1.3.4 or newer is strongly recommended.

*** Changes in avr-libc-1.0:

* Move source to cvs repositiory at http://savannah.gnu.org/projects/avr-libc

Anonymous cvs access to the source is now available. There is also a mailing
list set up for discussion of development of avr-libc.

* License changes.

All the files in the project now are covered by a modified BSD license. This 
allows royalty free use of the library in commerical products. All of the 
public domain files in the project have been switched to the new license and
copyright given to the contributors of the files.

There were some files taken from GNU GPL'd projects which were removed from
avr-libc to simplify the licensing. The removed files only supplied alternate
implementations, so nothing was lost by their removal.

* Requires latest binutils and gcc

Marek did some fairly major work with binutils and gcc to make adding support
for new devices easier. His changes in those tools required changes to
avr-libc which make it incompatible with older versions of binutils and gcc.
Gcc versions >= 3.3 and binutils versions >= 2.13 are required.

* New malloc implementation.

Joerg Wunsch has supplied an improved malloc implementation which is less
prone to fragmentation.

* Documentation!

Joerg Wunsch and Ted Roth and have been working on using the doxygen program to
embed documentation comments into source code. Additionally, Harald Kipp's 
inline asm cookbook and Rich Neswold's Avr Tools document have been merged into
the user manual. The goal is to have a single place for all the documentation
a user would need to get started developing for AVR microcontrollers using
the GNU development tool chain.

The latest documentation is available online at
  http://www.freesoftware.fsf.org/avr-libc/

* I/O registers accessible directly in C expressions

You can now do this in your code:
  PORTA |= 0x02;

See the "Special Function Registers" documentation for details. This method is
preferred over the use of the deprecated inp(), inb(), inw(), outp(), outb()
and outw() functions.

* New devices supported

mega128
mega169
mega16
mega32
mega64 [untested]
mega8515 [untested]
mega8535 [untested]
tiny26
76c711
43usb320
43usb355
86rf401

* Improved trigonometrical functions:

Reiner Patommel provided complete rewrites for asin(), atan() and atan2()
that feature a better (for some argument ranges even much better)
accuracy than the previous versions.  Note that since acos() uses asin(),
it also benefits from this.

* Incompatibilities with previous version.

The arguments for outb()/outw() have been reversed.
  (value,port) -> (port,value)

* New pgmspace.h API.

Changed function names and added new functions to read the Program Space
FLASH. Added new functions to read 16-bit (word) values. The new API should 
also clear up problems with reading data from devices with > 64K of FLASH.

The API now includes:
pgm_read_byte       (maps to the *_near function below)
pgm_read_word       (maps to the *_near function below)
pgm_read_byte_near
pgm_read_word_near
pgm_read_byte_far
pgm_read_word_far


* New bootloader support API.

#include <avr/boot.h>

This provides bootloader support functions to those processors that have 
builtin bootloader support.

* inb / outb / inw / outw / cbi / sbi macros are deprecated.

* New string functions and optimized string functions.

strlcpy   (optimized)
strlcat   (optimized)
strsep    (new)
strtok_r  (new)
strlcat_P (new)
strlcpy_P (new)
strncat_P (new)

Contributed by Reiner Patommel with some work on strlcpy, strlcat by
Eric Weddington.

* New eeprom functions by Artur Lipowski <LAL@pro.onet.pl>

eeprom_write_word
eeprom_write_block


*** Changes up to avr-libc-20020203:

See the ChangeLog file up to 2002-02-03 for details.

